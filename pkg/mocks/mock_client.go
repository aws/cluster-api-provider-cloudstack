// Code generated by MockGen. DO NOT EDIT.
// Source: sigs.k8s.io/cluster-api-provider-cloudstack/pkg/cloud (interfaces: Client)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	cloudstack "github.com/apache/cloudstack-go/v2/cloudstack"
	gomock "github.com/golang/mock/gomock"
	v1beta2 "sigs.k8s.io/cluster-api-provider-cloudstack/api/v1beta2"
	cloud "sigs.k8s.io/cluster-api-provider-cloudstack/pkg/cloud"
	v1beta1 "sigs.k8s.io/cluster-api/api/v1beta1"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// AddClusterTag mocks base method.
func (m *MockClient) AddClusterTag(arg0 cloud.ResourceType, arg1 string, arg2 *v1beta2.CloudStackCluster) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddClusterTag", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddClusterTag indicates an expected call of AddClusterTag.
func (mr *MockClientMockRecorder) AddClusterTag(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddClusterTag", reflect.TypeOf((*MockClient)(nil).AddClusterTag), arg0, arg1, arg2)
}

// AddCreatedByCAPCTag mocks base method.
func (m *MockClient) AddCreatedByCAPCTag(arg0 cloud.ResourceType, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCreatedByCAPCTag", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCreatedByCAPCTag indicates an expected call of AddCreatedByCAPCTag.
func (mr *MockClientMockRecorder) AddCreatedByCAPCTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCreatedByCAPCTag", reflect.TypeOf((*MockClient)(nil).AddCreatedByCAPCTag), arg0, arg1)
}

// AddTags mocks base method.
func (m *MockClient) AddTags(arg0 cloud.ResourceType, arg1 string, arg2 map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTags", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTags indicates an expected call of AddTags.
func (mr *MockClientMockRecorder) AddTags(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTags", reflect.TypeOf((*MockClient)(nil).AddTags), arg0, arg1, arg2)
}

// AssignVMToLoadBalancerRule mocks base method.
func (m *MockClient) AssignVMToLoadBalancerRule(arg0 *v1beta2.CloudStackIsolatedNetwork, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignVMToLoadBalancerRule", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignVMToLoadBalancerRule indicates an expected call of AssignVMToLoadBalancerRule.
func (mr *MockClientMockRecorder) AssignVMToLoadBalancerRule(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignVMToLoadBalancerRule", reflect.TypeOf((*MockClient)(nil).AssignVMToLoadBalancerRule), arg0, arg1)
}

// AssociateAffinityGroup mocks base method.
func (m *MockClient) AssociateAffinityGroup(arg0 *v1beta2.CloudStackMachine, arg1 cloud.AffinityGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateAffinityGroup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssociateAffinityGroup indicates an expected call of AssociateAffinityGroup.
func (mr *MockClientMockRecorder) AssociateAffinityGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateAffinityGroup", reflect.TypeOf((*MockClient)(nil).AssociateAffinityGroup), arg0, arg1)
}

// AssociatePublicIPAddress mocks base method.
func (m *MockClient) AssociatePublicIPAddress(arg0 *v1beta2.CloudStackFailureDomain, arg1 *v1beta2.CloudStackIsolatedNetwork, arg2 *v1beta2.CloudStackCluster) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociatePublicIPAddress", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssociatePublicIPAddress indicates an expected call of AssociatePublicIPAddress.
func (mr *MockClientMockRecorder) AssociatePublicIPAddress(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociatePublicIPAddress", reflect.TypeOf((*MockClient)(nil).AssociatePublicIPAddress), arg0, arg1, arg2)
}

// DeleteAffinityGroup mocks base method.
func (m *MockClient) DeleteAffinityGroup(arg0 *cloud.AffinityGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAffinityGroup", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAffinityGroup indicates an expected call of DeleteAffinityGroup.
func (mr *MockClientMockRecorder) DeleteAffinityGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAffinityGroup", reflect.TypeOf((*MockClient)(nil).DeleteAffinityGroup), arg0)
}

// DeleteClusterTag mocks base method.
func (m *MockClient) DeleteClusterTag(arg0 cloud.ResourceType, arg1 string, arg2 *v1beta2.CloudStackCluster) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClusterTag", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClusterTag indicates an expected call of DeleteClusterTag.
func (mr *MockClientMockRecorder) DeleteClusterTag(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClusterTag", reflect.TypeOf((*MockClient)(nil).DeleteClusterTag), arg0, arg1, arg2)
}

// DeleteCreatedByCAPCTag mocks base method.
func (m *MockClient) DeleteCreatedByCAPCTag(arg0 cloud.ResourceType, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCreatedByCAPCTag", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCreatedByCAPCTag indicates an expected call of DeleteCreatedByCAPCTag.
func (mr *MockClientMockRecorder) DeleteCreatedByCAPCTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCreatedByCAPCTag", reflect.TypeOf((*MockClient)(nil).DeleteCreatedByCAPCTag), arg0, arg1)
}

// DeleteNetwork mocks base method.
func (m *MockClient) DeleteNetwork(arg0 v1beta2.Network) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNetwork", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNetwork indicates an expected call of DeleteNetwork.
func (mr *MockClientMockRecorder) DeleteNetwork(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNetwork", reflect.TypeOf((*MockClient)(nil).DeleteNetwork), arg0)
}

// DeleteTags mocks base method.
func (m *MockClient) DeleteTags(arg0 cloud.ResourceType, arg1 string, arg2 map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTags", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTags indicates an expected call of DeleteTags.
func (mr *MockClientMockRecorder) DeleteTags(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTags", reflect.TypeOf((*MockClient)(nil).DeleteTags), arg0, arg1, arg2)
}

// DestroyVMInstance mocks base method.
func (m *MockClient) DestroyVMInstance(arg0 *v1beta2.CloudStackMachine) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DestroyVMInstance", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DestroyVMInstance indicates an expected call of DestroyVMInstance.
func (mr *MockClientMockRecorder) DestroyVMInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestroyVMInstance", reflect.TypeOf((*MockClient)(nil).DestroyVMInstance), arg0)
}

// DisassociateAffinityGroup mocks base method.
func (m *MockClient) DisassociateAffinityGroup(arg0 *v1beta2.CloudStackMachine, arg1 cloud.AffinityGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateAffinityGroup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DisassociateAffinityGroup indicates an expected call of DisassociateAffinityGroup.
func (mr *MockClientMockRecorder) DisassociateAffinityGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateAffinityGroup", reflect.TypeOf((*MockClient)(nil).DisassociateAffinityGroup), arg0, arg1)
}

// DisposeIsoNetResources mocks base method.
func (m *MockClient) DisposeIsoNetResources(arg0 *v1beta2.CloudStackFailureDomain, arg1 *v1beta2.CloudStackIsolatedNetwork, arg2 *v1beta2.CloudStackCluster) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisposeIsoNetResources", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DisposeIsoNetResources indicates an expected call of DisposeIsoNetResources.
func (mr *MockClientMockRecorder) DisposeIsoNetResources(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisposeIsoNetResources", reflect.TypeOf((*MockClient)(nil).DisposeIsoNetResources), arg0, arg1, arg2)
}

// DoClusterTagsAllowDisposal mocks base method.
func (m *MockClient) DoClusterTagsAllowDisposal(arg0 cloud.ResourceType, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoClusterTagsAllowDisposal", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoClusterTagsAllowDisposal indicates an expected call of DoClusterTagsAllowDisposal.
func (mr *MockClientMockRecorder) DoClusterTagsAllowDisposal(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoClusterTagsAllowDisposal", reflect.TypeOf((*MockClient)(nil).DoClusterTagsAllowDisposal), arg0, arg1)
}

// FetchAffinityGroup mocks base method.
func (m *MockClient) FetchAffinityGroup(arg0 *cloud.AffinityGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAffinityGroup", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// FetchAffinityGroup indicates an expected call of FetchAffinityGroup.
func (mr *MockClientMockRecorder) FetchAffinityGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAffinityGroup", reflect.TypeOf((*MockClient)(nil).FetchAffinityGroup), arg0)
}

// GetOrCreateAffinityGroup mocks base method.
func (m *MockClient) GetOrCreateAffinityGroup(arg0 *cloud.AffinityGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrCreateAffinityGroup", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetOrCreateAffinityGroup indicates an expected call of GetOrCreateAffinityGroup.
func (mr *MockClientMockRecorder) GetOrCreateAffinityGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrCreateAffinityGroup", reflect.TypeOf((*MockClient)(nil).GetOrCreateAffinityGroup), arg0)
}

// GetOrCreateIsolatedNetwork mocks base method.
func (m *MockClient) GetOrCreateIsolatedNetwork(arg0 *v1beta2.CloudStackFailureDomain, arg1 *v1beta2.CloudStackIsolatedNetwork, arg2 *v1beta2.CloudStackCluster) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrCreateIsolatedNetwork", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetOrCreateIsolatedNetwork indicates an expected call of GetOrCreateIsolatedNetwork.
func (mr *MockClientMockRecorder) GetOrCreateIsolatedNetwork(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrCreateIsolatedNetwork", reflect.TypeOf((*MockClient)(nil).GetOrCreateIsolatedNetwork), arg0, arg1, arg2)
}

// GetOrCreateLoadBalancerRule mocks base method.
func (m *MockClient) GetOrCreateLoadBalancerRule(arg0 *v1beta2.CloudStackFailureDomain, arg1 *v1beta2.CloudStackIsolatedNetwork, arg2 *v1beta2.CloudStackCluster) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrCreateLoadBalancerRule", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetOrCreateLoadBalancerRule indicates an expected call of GetOrCreateLoadBalancerRule.
func (mr *MockClientMockRecorder) GetOrCreateLoadBalancerRule(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrCreateLoadBalancerRule", reflect.TypeOf((*MockClient)(nil).GetOrCreateLoadBalancerRule), arg0, arg1, arg2)
}

// GetOrCreateVMInstance mocks base method.
func (m *MockClient) GetOrCreateVMInstance(arg0 *v1beta2.CloudStackMachine, arg1 *v1beta1.Machine, arg2 *v1beta2.CloudStackCluster, arg3 *v1beta2.CloudStackFailureDomain, arg4 *v1beta2.CloudStackAffinityGroup, arg5 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrCreateVMInstance", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetOrCreateVMInstance indicates an expected call of GetOrCreateVMInstance.
func (mr *MockClientMockRecorder) GetOrCreateVMInstance(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrCreateVMInstance", reflect.TypeOf((*MockClient)(nil).GetOrCreateVMInstance), arg0, arg1, arg2, arg3, arg4, arg5)
}

// GetPublicIP mocks base method.
func (m *MockClient) GetPublicIP(arg0 *v1beta2.CloudStackFailureDomain, arg1 *v1beta2.CloudStackIsolatedNetwork, arg2 *v1beta2.CloudStackCluster) (*cloudstack.PublicIpAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicIP", arg0, arg1, arg2)
	ret0, _ := ret[0].(*cloudstack.PublicIpAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicIP indicates an expected call of GetPublicIP.
func (mr *MockClientMockRecorder) GetPublicIP(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicIP", reflect.TypeOf((*MockClient)(nil).GetPublicIP), arg0, arg1, arg2)
}

// GetTags mocks base method.
func (m *MockClient) GetTags(arg0 cloud.ResourceType, arg1 string) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTags", arg0, arg1)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTags indicates an expected call of GetTags.
func (mr *MockClientMockRecorder) GetTags(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTags", reflect.TypeOf((*MockClient)(nil).GetTags), arg0, arg1)
}

// GetUserWithKeys mocks base method.
func (m *MockClient) GetUserWithKeys(arg0 *cloud.User) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserWithKeys", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserWithKeys indicates an expected call of GetUserWithKeys.
func (mr *MockClientMockRecorder) GetUserWithKeys(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserWithKeys", reflect.TypeOf((*MockClient)(nil).GetUserWithKeys), arg0)
}

// NewClientInDomainAndAccount mocks base method.
func (m *MockClient) NewClientInDomainAndAccount(arg0, arg1 string) (cloud.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewClientInDomainAndAccount", arg0, arg1)
	ret0, _ := ret[0].(cloud.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewClientInDomainAndAccount indicates an expected call of NewClientInDomainAndAccount.
func (mr *MockClientMockRecorder) NewClientInDomainAndAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewClientInDomainAndAccount", reflect.TypeOf((*MockClient)(nil).NewClientInDomainAndAccount), arg0, arg1)
}

// OpenFirewallRules mocks base method.
func (m *MockClient) OpenFirewallRules(arg0 *v1beta2.CloudStackIsolatedNetwork) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenFirewallRules", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// OpenFirewallRules indicates an expected call of OpenFirewallRules.
func (mr *MockClientMockRecorder) OpenFirewallRules(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenFirewallRules", reflect.TypeOf((*MockClient)(nil).OpenFirewallRules), arg0)
}

// RemoveClusterTagFromNetwork mocks base method.
func (m *MockClient) RemoveClusterTagFromNetwork(arg0 *v1beta2.CloudStackCluster, arg1 v1beta2.Network) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveClusterTagFromNetwork", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveClusterTagFromNetwork indicates an expected call of RemoveClusterTagFromNetwork.
func (mr *MockClientMockRecorder) RemoveClusterTagFromNetwork(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveClusterTagFromNetwork", reflect.TypeOf((*MockClient)(nil).RemoveClusterTagFromNetwork), arg0, arg1)
}

// ResolveAccount mocks base method.
func (m *MockClient) ResolveAccount(arg0 *cloud.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveAccount", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResolveAccount indicates an expected call of ResolveAccount.
func (mr *MockClientMockRecorder) ResolveAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveAccount", reflect.TypeOf((*MockClient)(nil).ResolveAccount), arg0)
}

// ResolveDomain mocks base method.
func (m *MockClient) ResolveDomain(arg0 *cloud.Domain) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveDomain", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResolveDomain indicates an expected call of ResolveDomain.
func (mr *MockClientMockRecorder) ResolveDomain(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveDomain", reflect.TypeOf((*MockClient)(nil).ResolveDomain), arg0)
}

// ResolveLoadBalancerRuleDetails mocks base method.
func (m *MockClient) ResolveLoadBalancerRuleDetails(arg0 *v1beta2.CloudStackFailureDomain, arg1 *v1beta2.CloudStackIsolatedNetwork, arg2 *v1beta2.CloudStackCluster) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveLoadBalancerRuleDetails", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResolveLoadBalancerRuleDetails indicates an expected call of ResolveLoadBalancerRuleDetails.
func (mr *MockClientMockRecorder) ResolveLoadBalancerRuleDetails(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveLoadBalancerRuleDetails", reflect.TypeOf((*MockClient)(nil).ResolveLoadBalancerRuleDetails), arg0, arg1, arg2)
}

// ResolveNetwork mocks base method.
func (m *MockClient) ResolveNetwork(arg0 *v1beta2.Network) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveNetwork", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResolveNetwork indicates an expected call of ResolveNetwork.
func (mr *MockClientMockRecorder) ResolveNetwork(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveNetwork", reflect.TypeOf((*MockClient)(nil).ResolveNetwork), arg0)
}

// ResolveNetworkForZone mocks base method.
func (m *MockClient) ResolveNetworkForZone(arg0 *v1beta2.CloudStackZoneSpec) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveNetworkForZone", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResolveNetworkForZone indicates an expected call of ResolveNetworkForZone.
func (mr *MockClientMockRecorder) ResolveNetworkForZone(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveNetworkForZone", reflect.TypeOf((*MockClient)(nil).ResolveNetworkForZone), arg0)
}

// ResolveUser mocks base method.
func (m *MockClient) ResolveUser(arg0 *cloud.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResolveUser indicates an expected call of ResolveUser.
func (mr *MockClientMockRecorder) ResolveUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveUser", reflect.TypeOf((*MockClient)(nil).ResolveUser), arg0)
}

// ResolveUserKeys mocks base method.
func (m *MockClient) ResolveUserKeys(arg0 *cloud.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveUserKeys", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResolveUserKeys indicates an expected call of ResolveUserKeys.
func (mr *MockClientMockRecorder) ResolveUserKeys(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveUserKeys", reflect.TypeOf((*MockClient)(nil).ResolveUserKeys), arg0)
}

// ResolveVMInstanceDetails mocks base method.
func (m *MockClient) ResolveVMInstanceDetails(arg0 *v1beta2.CloudStackMachine) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveVMInstanceDetails", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResolveVMInstanceDetails indicates an expected call of ResolveVMInstanceDetails.
func (mr *MockClientMockRecorder) ResolveVMInstanceDetails(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveVMInstanceDetails", reflect.TypeOf((*MockClient)(nil).ResolveVMInstanceDetails), arg0)
}

// ResolveZone mocks base method.
func (m *MockClient) ResolveZone(arg0 *v1beta2.CloudStackZoneSpec) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveZone", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResolveZone indicates an expected call of ResolveZone.
func (mr *MockClientMockRecorder) ResolveZone(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveZone", reflect.TypeOf((*MockClient)(nil).ResolveZone), arg0)
}
